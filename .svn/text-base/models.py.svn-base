import datetime

from django.db import models
from django.contrib.auth.models import User
from django.conf import settings
from django.core.mail import send_mail
from django.contrib.sites.models import Site
from django.contrib.auth.models import User
from django.template.defaultfilters import slugify

from extras.utilities import get_favicon, _mkdir


class SupportType(models.Model):
	name = models.CharField(unique=True, max_length=100)
	slug = models.SlugField(unique=True, max_length=100)
	
	description = models.TextField(blank=True)
	monthly_hours = models.FloatField()
	monthly_cost = models.FloatField()
	hours_rollover = models.BooleanField(default=False)

	def __unicode__(self):
		return self.name


class Client(models.Model):
	name = models.CharField(unique=True, max_length=250)
	slug = models.SlugField(unique=True, max_length=250)
	
	# contact info
	contact_name = models.CharField(blank=True, null=True, max_length=100)
	email = models.EmailField(blank=True, null=True)
	telephone = models.CharField(blank=True, null=True, max_length=100)
	
	# address
	address1 = models.CharField(blank=True, null=True, max_length=100)
	address2 = models.CharField(blank=True, null=True, max_length=100)
	city = models.CharField(blank=True, null=True, max_length=100)
	county = models.CharField(blank=True, null=True, max_length=100)
	postcode = models.CharField(blank=True, null=True, max_length=100)
	
	# emails
	campaign_monitor_apikey = models.CharField(unique=True, max_length=250, blank=True, null=True, 
		help_text='Can be found in the client settings page.')
	delivery_fee = models.FloatField(default=0.00, help_text='In Pounds')
	cost_per_recipient = models.FloatField(default=0.00, help_text='in pence')
	design_spam_fee = models.FloatField(default=0.00, help_text='In Pounds')
	
	# support
	supported = models.BooleanField(default=False)
	support_type = models.ForeignKey(SupportType, null=True, blank=True)

	def get_all_campaigns(self):
		return self.emailcampaign_set
		
	def get_campaigns_month(self, y, m):
		return self.emailcampaign_set.filter(sent_date__year=y, sent_date__month=m)
		
	def save(self, force_insert=False, force_update=False):
	    # Set key as NULL instead of empty string for uniqueness check
	    if not self.campaign_monitor_apikey:
	        self.campaign_monitor_apikey = None
	    super(Client, self).save(force_insert, force_update)
		
	def __unicode__(self):
		return self.name


class Website(models.Model):
	# basic info
	name = models.CharField(unique=True, max_length=250)
	slug = models.SlugField(unique=True, max_length=250)
	url = models.URLField(verify_exists=True)  # TODO - DEBUG - set true in production
	owner = models.ForeignKey('Client')
	
	favicon = models.CharField(blank=True, editable=False, max_length=120)
	
	# monitoring
	monitor_uptime = models.BooleanField(default=False)
	person_responsible = models.ForeignKey(User)
	notify_when_down = models.BooleanField(default=True)
	last_check = models.DateTimeField(blank=True, default=datetime.datetime.now)
	is_up = models.BooleanField(default=True)	

	def __unicode__(self):
		return self.name
		
	def save(self, force_insert=False, force_update=False):
		if self.url:
			favicon_path = settings.MEDIA_ROOT + 'clients/' + self.slug
			_mkdir(favicon_path)
			favicon_path += '/favicon.ico'
			
			favicon = get_favicon(self.url, favicon_path)
			if favicon:
				self.favicon = favicon_path
			else:
				self.favicon = ''

		self.slug = slugify(self.name) #TODO - catch integrityerror when duplicate slug.
					
		super(Website, self).save(force_insert, force_update)
		
				
class ClientNote(models.Model):
	create_date = models.DateTimeField(default=datetime.datetime.now)
	title = models.CharField(unique=True, max_length=250)
	slug = models.SlugField(unique=True, max_length=250,unique_for_date="create_date")
	
	content = models.TextField()
	related_to = models.ForeignKey('Client')
	
	class Meta:
		ordering = ('-create_date', 'title')

	def __unicode__(self):
		return self.title


class WebsiteNote(models.Model):
	create_date = models.DateTimeField(default=datetime.datetime.now,unique_for_date="create_date")
	title = models.CharField(unique=True, max_length=250)
	slug = models.SlugField(unique=True, max_length=250)
	author = models.ForeignKey(User)
	content = models.TextField()
	related_to = models.ForeignKey('Website')

	def __unicode__(self):
		return self.title

		
class Incident(models.Model):
	incident_date = models.DateTimeField(default=datetime.datetime.now)
	error_code = models.CharField(max_length=25)
	error_response = models.CharField(max_length=250)
	website = models.ForeignKey('Website')
	comment = models.TextField()
	
	email_sent = models.BooleanField(default=False, editable=False)

	def save(self, force_insert=False, force_update=False):
		if self.website.monitor_uptime and self.website.notify_when_down:
			if self.website.person_responsible.email:
				mail_subject = "Incident: " + self.website.name + " at " + str(self.incident_date)
				mail_body = "Error code: " + str(self.error_code) + " url:  " + self.website.url 
				mail_body += "\n\nGo to http://" + Site.objects.get_current().domain + "/websites/" + self.website.slug
				send_mail(mail_subject, mail_body, settings.EMAIL_FROM,
					[self.website.person_responsible.email], fail_silently=False)
				self.email_sent = True
				
		super(Incident, self).save(force_insert, force_update)
		
	def __unicode__(self):
		return self.website.name + ": " + str(self.incident_date)		
		

class TaskType(models.Model):
	name = models.CharField(unique=True, max_length=250)
	description = models.TextField(blank=True)
	is_billable = models.BooleanField(default=True)
	cost_per_hour = models.FloatField(default=0.0)
	 
	def __unicode__(self):
		return self.name


class Task(models.Model):
	name = models.CharField(unique=True, max_length=250)
	task_type = models.ForeignKey(TaskType)
	created_date = models.DateField(auto_now_add=True,blank=False)
	due_date = models.DateField(blank=True, null=True)
	
	client = models.ForeignKey(Client)
	person_responsible = models.ForeignKey(User)
	
	description = models.TextField(blank=True)
	priority = models.IntegerField(default=10)
	
	completed = models.BooleanField(default=False)
	hours_alloted = models.FloatField(blank=True, null=True)
	hours_taken = models.FloatField(blank=True, null=True)
	
	def __unicode__(self):
		return self.name
		
	class Meta:
		ordering = ['due_date', '-priority']
		
	#def save(self, force_insert=False, force_update=False):
	#	if self.pk is not None:
	#		orig = Task.objects.get(pk=self.pk)
	#	super(Task, self).save(force_insert, force_update)


class UserProfile(models.Model):
	home_address = models.TextField(blank=True, null=True)
	phone_number = models.BigIntegerField(blank=True, null=True)
	receive_text_alerts = models.BooleanField(default=True)
	user = models.ForeignKey(User, unique=True)

	def __unicode__(self):
		return self.user.username
		

    	
